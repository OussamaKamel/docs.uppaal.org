<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Declarations on UPPAAL Documentation</title><link>https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/</link><description>Recent content in Declarations on UPPAAL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/index.xml" rel="self" type="application/rss+xml"/><item><title>Types</title><link>https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/types/</guid><description>There are 6 predefined types: int, bool, clock, chan, double and string. Array and record types can be defined over all types except string.
Type ::= Prefix TypeId Prefix ::= 'urgent' | 'broadcast' | 'meta' | 'const' TypeId ::= ID | 'int' | 'clock' | 'chan' | 'bool' | 'double' | 'string' | 'int' '[' [Expression] ',' [Expression] ']' | 'scalar' '[' Expression ']' | 'struct' '{' FieldDecl (FieldDecl)* '}' FieldDecl ::= Type ID ArrayDecl* (',' ID ArrayDecl*)* ';' ArrayDecl ::= '[' [Expression] ']' | '[' Type ']' The default range of an integer is [-32768, 32767].</description></item><item><title>Functions</title><link>https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statictest.test.cs.aau.dk/uppaaldoc/language-reference/system-description/declarations/functions/</guid><description>Functions can be declared alongside other declarations. The syntax for functions is defined by the grammar for Function:
Function ::= [Type] [ID] '(' [Parameters] ')' Block Block ::= '{' [Declarations] Statement* '}' Statement ::= Block | ';' | [Expression] ';' | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement ForLoop ::= 'for' '(' [Expression] ';' [Expression] ';' [Expression] ')' Statement Iteration ::= 'for' '(' [ID] ':' [Type] ')' Statement WhileLoop ::= 'while' '(' [Expression] ')' Statement DoWhile ::= 'do' Statement 'while' '(' [Expression] ')' ';' IfStatment ::= 'if' '(' [Expression] ')' Statement [ 'else' Statement ] ReturnStatement ::= 'return' [ [Expression] ] ';' Iterators The keyword for has two uses: One is a C/C++/Java like for-loop, and the other is a Java like iterator.</description></item></channel></rss>